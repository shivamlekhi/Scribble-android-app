package com.leag.scratchpad;import android.app.ActivityOptions;import android.app.AlertDialog;import android.app.Dialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.graphics.Bitmap;import android.graphics.BitmapFactory;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.ColorFilter;import android.graphics.Matrix;import android.graphics.Paint;import android.graphics.Typeface;import android.graphics.drawable.Drawable;import android.net.Uri;import android.os.Bundle;import android.os.Environment;import android.provider.MediaStore;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.MotionEvent;import android.view.ScaleGestureDetector;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.NumberPicker;import android.widget.PopupMenu;import android.widget.RelativeLayout;import android.widget.SeekBar;import android.widget.TextView;import android.widget.Toast;import com.larswerkman.holocolorpicker.ColorPicker;import com.larswerkman.holocolorpicker.OpacityBar;import com.larswerkman.holocolorpicker.SVBar;import com.larswerkman.holocolorpicker.SaturationBar;import com.sothree.slidinguppanel.SlidingUpPanelLayout;import com.widgets.VerticalSeekBar;import com.widgets.ZoomableRelativeLayout;import java.io.BufferedOutputStream;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.io.OutputStream;import at.markushi.ui.CircleButton;public class WhiteBoardActivity extends ActionBarActivity implements View.OnClickListener {    public static final String MODE = "Mode";    public static final String MODE_EDIT = "Mode_Edit";    public static final String MODE_NEW = "Mode_New";    public static final String NOTEBOOK_NAME = "Notebook_Name";    public static final String PAGE_FILENAME = "PAGE_FILENAME";    private static String ACTIVE_TOOL = "";    private static final String PENCIL_TOOL = "PENCIL";    private static final String BRUSH_TOOL = "BRUSH";    private static final String ERASER_TOOL = "ERASER";    RelativeLayout ActiveToolHolder;    ZoomableRelativeLayout MainLayout;    Button MoveRightButton;    RelativeLayout panel;    DrawingView drawview;    View ColorIndicator , ZoomView;    boolean brushSeekBarVisible, MenuOpen = false;    VerticalSeekBar brushsizebar;    SeekBar HorizontalBrushSizeBar;    LinearLayout PickColorButton, PageCountLayout;    ImageView BackgroundImage;    int CurrentColor;    TextView BookName,PageCountText;    int GALLERY_LOAD_IMAGE = 983, REQUEST_CAMERA = 873;    Dialog BackgroundChooserDialog;    ImageView OpenMenuButton;    CircleButton pencilButton, EraserToolButton , BackgroundButton, BrushToolButton,            UndoButton, SaveButton, DeleteAllButton,RedoButton,            PrevPageButton, NextPageButton, ShareButton;    SlidingUpPanelLayout SlideupPanel;    boolean firstFile, ImageAsBackground, alreadySaved = false, nextPagePresent, prevPagePresent;    String[] Folderfiles;    int CurrentPageFileIndex;    private String savedFilePath;    final Context context = this;    Button        pick;    NumberPicker  aNumberPicker;    AlertDialog.Builder alertBw;    AlertDialog         alertDw;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_white_board);        getActionBar().hide();        // panel = (RelativeLayout) findViewById(R.id.drawpanel);        drawview = (DrawingView) findViewById(R.id.drawing_view);        CurrentColor = Color.parseColor("#000000");        drawview.setBrushSize(5);        drawview.setColor(CurrentColor);        initTools();        InitMenu();        initSlideupMenu();        initZoomPanel();    }    @Override    public void onBackPressed() {        // super.onBackPressed();        Intent pages = new Intent(this, PagesActivity.class);        this.finish();        pages.putExtra(PagesActivity.NOTEBOOK_NAME, getIntent().getExtras().getString(NOTEBOOK_NAME));        startActivity(pages);        //Save();    }    private void initSlideupMenu() {        SlideupPanel = (SlidingUpPanelLayout) findViewById(R.id.sliding_layout);        SlideupPanel.setAnchorPoint(1f);        SlideupPanel.showPanel();        Typeface BEBAS = Typeface.createFromAsset(getAssets(), "fonts/BebasNeue.otf");        BookName = (TextView) findViewById(R.id.whiteboard_book_name);        BookName.setText(getIntent().getExtras().getString(NOTEBOOK_NAME));        BookName.setTypeface(BEBAS);        PageCountText = (TextView) findViewById(R.id.page_count_text);        PageCountText.setTypeface(BEBAS);        String iconsStoragePath = Environment.getExternalStorageDirectory() + "/Scribble/"+ getIntent().getExtras().getString(NOTEBOOK_NAME) + "/";        File sdIconStorageDir = new File(iconsStoragePath);        if(sdIconStorageDir.list().length > 0) {            String[] files = sdIconStorageDir.list();            // PageCountText.setText("PAGE " + files.indexOf() + files.length);            if(getIntent().getExtras().getString(MODE).equals(MODE_NEW)) {                nextPagePresent = false;                if(files.length == 0) {                    PrevPageButton.setImageResource(R.drawable.transparent_background);                    NextPageButton.setImageResource(R.drawable.plus);                    PageCountText.setText("PAGE 1/1");                } else {                    NextPageButton.setImageResource(R.drawable.plus);                    prevPagePresent = true;                    PageCountText.setText("PAGE " + Integer.toString(files.length+1) + "/" + Integer.toString(files.length+1));                }            }            else if(getIntent().getExtras().getString(MODE).equals(MODE_EDIT)) {                String page_file = getIntent().getExtras().getString(PAGE_FILENAME).replace(iconsStoragePath, "");                for (int i = 0; i < files.length; i++) {                    if (files[i].equals(page_file)) {                        CurrentPageFileIndex = i;                    }                }                Folderfiles = files;                String filepath = getIntent().getExtras().getString(PAGE_FILENAME);                filepath = filepath.replace(iconsStoragePath, "");                if (filepath.equals(files[0])) { // First Page                    PageCountText.setText("PAGE 1/" + Integer.toString(files.length));                    PrevPageButton.setImageResource(R.drawable.transparent_background);                    if (files.length > 1) {                        nextPagePresent = true;                    } else {                        NextPageButton.setImageResource(R.drawable.plus);                        nextPagePresent = false;                    }                } else if (filepath.equals(files[files.length - 1])) // Last Page                {                    PageCountText.setText("PAGE " + (CurrentPageFileIndex+1) + "/" + Integer.toString(files.length));                    NextPageButton.setImageResource(R.drawable.plus);                    if (!(files.length > 1)) { // No Back Page                        PrevPageButton.setImageResource(R.drawable.transparent_background);                        nextPagePresent = true;                    } else {                        prevPagePresent = true;                    }                } else { // Between Pages                    PageCountText.setText("PAGE " + (CurrentPageFileIndex+1) + "/" + Integer.toString(files.length));                    nextPagePresent = true;                    prevPagePresent = true;                }            }        } else { // New Notebook State            PrevPageButton.setBackgroundColor(getResources().getColor(R.color.nice_color_light));            PrevPageButton.setImageResource(R.drawable.transparent_background);            NextPageButton.setImageResource(R.drawable.plus);            nextPagePresent = false;        }    }    private void InitMenu() {        MoveRightButton = (Button) findViewById(R.id.move_right_button);        BackgroundButton = (CircleButton) findViewById(R.id.background_button);        //PencilButton = (ImageView) findViewById(R.id.pencil_button);        pencilButton = (CircleButton) findViewById(R.id.pencil_button);        EraserToolButton = (CircleButton) findViewById(R.id.eraser_tool);        BrushToolButton = (CircleButton) findViewById(R.id.brush_tool);        ActiveToolHolder = (RelativeLayout) findViewById(R.id.active_tool_holder);        BrushToolButton.setOnClickListener(this);        EraserToolButton.setOnClickListener(this);        SaveButton = (CircleButton) findViewById(R.id.save_button);        DeleteAllButton = (CircleButton) findViewById(R.id.delete_all_button);        UndoButton = (CircleButton) findViewById(R.id.undo_button);        RedoButton = (CircleButton) findViewById(R.id.redo_button);        BackgroundImage = (ImageView) findViewById(R.id.whiteboard_background_image);        ShareButton = (CircleButton) findViewById(R.id.share_button);        PrevPageButton = (CircleButton) findViewById(R.id.prev_page_button);        NextPageButton = (CircleButton) findViewById(R.id.next_page_button);        if(getIntent().getExtras().getString(MODE).equals(MODE_EDIT)) {            String filepath = getIntent().getExtras().getString(PAGE_FILENAME);            Bitmap bitmap = BitmapFactory.decodeFile(filepath);            //BackgroundImage.setImageBitmap(bitmap);            drawview.setBackground(bitmap);        }        PageCountLayout = (LinearLayout) findViewById(R.id.PageCountLayout);        // PencilButton.setOnClickListener(this);        BackgroundButton.setOnClickListener(this);        DeleteAllButton.setOnClickListener(this);        SaveButton.setOnClickListener(this);        UndoButton.setOnClickListener(this);        RedoButton.setOnClickListener(this);        ShareButton.setOnClickListener(this);        pencilButton.setOnClickListener(this);        PrevPageButton.setOnClickListener(this);        NextPageButton.setOnClickListener(this);        MoveRightButton.setOnClickListener(this);        ChooseTool(BRUSH_TOOL);    }    private void initTools() {        PickColorButton = (LinearLayout) findViewById(R.id.pick_color_button);        brushsizebar = (VerticalSeekBar) findViewById(R.id.brush_size_bar);        HorizontalBrushSizeBar = (SeekBar) findViewById(R.id.horizontal_brush_sizebar);        ColorIndicator = findViewById(R.id.color_indicator_layout);        ImageView BrushSizeButton = (ImageView) findViewById(R.id.brush_size_button);        ColorIndicator.setBackgroundColor(CurrentColor);        brushsizebar.setMax(55);        BrushSizeButton.setOnClickListener(this);        PickColorButton.setOnClickListener(this);        SeekBar.OnSeekBarChangeListener listener = new SeekBar.OnSeekBarChangeListener() {            @Override            public void onProgressChanged(SeekBar seekBar, int i, boolean b) {                drawview.setBrushSize(i+5);            }            @Override            public void onStartTrackingTouch(SeekBar seekBar) {            }            @Override            public void onStopTrackingTouch(SeekBar seekBar) {            }        };        brushsizebar.setOnSeekBarChangeListener(listener);        HorizontalBrushSizeBar.setOnSeekBarChangeListener(listener);    }    private void initZoomPanel() {        ZoomView = findViewById(R.id.whiteboard_zoom_listener);        final RelativeLayout MainZoomer = (RelativeLayout) findViewById(R.id.zoomer_main_layout);        CircleButton btn = (CircleButton) findViewById(R.id.show_zoom_view);        btn.setOnTouchListener(new View.OnTouchListener() {            @Override            public boolean onTouch(View view, MotionEvent motionEvent) {                Log.d("MOTIOJ:" , motionEvent.toString());                switch(motionEvent.getAction()) {                    case MotionEvent.ACTION_DOWN:                        MainZoomer.setVisibility(View.VISIBLE);                        break;                    case MotionEvent.ACTION_UP:                        MainZoomer.setVisibility(View.GONE);                        break;                }                return true;            }        });    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.white_board, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }    @Override    public void onClick(View view) {        switch(view.getId()) {            case R.id.pick_color_button:                PickColor();                break;            case R.id.pencil_button:                drawview.isDrawing();                //ChooseTool(PENCIL_TOOL);                break;            case R.id.background_button:                ChooseBackground();                break;            case R.id.save_button:                AlertDialog.Builder saveDialog = new AlertDialog.Builder(WhiteBoardActivity.this);                saveDialog.setTitle("Save drawing");                saveDialog.setMessage("Save drawing to device Gallery?");                saveDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    public void onClick(DialogInterface dialog, int which) {                        //save drawing                        Save();                    }                });                saveDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener(){                    public void onClick(DialogInterface dialog, int which){                        dialog.cancel();                    }                });                saveDialog.show();                break;            case R.id.brush_tool:                ChooseTool(BRUSH_TOOL);                break;            case R.id.eraser_tool:                ChooseTool(ERASER_TOOL);                break;            case R.id.delete_all_button:                AlertDialog.Builder DeleteDialog = new AlertDialog.Builder(WhiteBoardActivity.this);                DeleteDialog.setTitle("Delete All");                DeleteDialog.setMessage("Are you sure you want to discard you master piece?");                DeleteDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        drawview.startNew();                        BackgroundImage.setImageResource(R.drawable.transparent_background);                        BackgroundImage.destroyDrawingCache();                        Toast.makeText(WhiteBoardActivity.this, "Saved", Toast.LENGTH_SHORT).show();                    }                });                DeleteDialog.setNegativeButton("No" ,null);                DeleteDialog.show();                break;            case R.id.undo_button:                drawview.onClickUndo();                break;            case R.id.redo_button:                drawview.onClickRedo();                break;            case R.id.share_button:                drawview.setDrawingCacheEnabled(true);                Bitmap image = drawview.getDrawingCache();                BackgroundImage.buildDrawingCache();                Bitmap bitmap = BackgroundImage.getDrawingCache();                Bitmap MergedBitmap = MergeBitmaps(bitmap, image);                String filePath = storeImage(MergedBitmap);                File file = new File(filePath);                ShareImage(file);                break;            case R.id.next_page_button:                Save();                nextPage(view);                break;            case R.id.prev_page_button:                PrevPage();                break;            case R.id.move_right_button:                drawview.CustomTrans(50,0);                break;        }    }    private void nextPage(View v) {        Intent slideactivity = new Intent(this, WhiteBoardActivity.class);        Bundle bndlanimation =                ActivityOptions.makeCustomAnimation(getApplicationContext(), R.anim.slide_in_right, R.anim.slide_out_left).toBundle();        if(nextPagePresent) {            String iconsStoragePath = Environment.getExternalStorageDirectory() + "/Scribble/"+ getIntent().getExtras().getString(NOTEBOOK_NAME) + "/";            slideactivity.putExtra(MODE, MODE_EDIT);            slideactivity.putExtra(NOTEBOOK_NAME, getIntent().getExtras().getString(NOTEBOOK_NAME));            slideactivity.putExtra(PAGE_FILENAME, iconsStoragePath + Folderfiles[CurrentPageFileIndex+1]);        } else {            slideactivity.putExtra(MODE, MODE_NEW);            slideactivity.putExtra(NOTEBOOK_NAME, getIntent().getExtras().getString(NOTEBOOK_NAME));        }        // SlideupPanel.hidePanel();        startActivity(slideactivity, bndlanimation);        this.finish();    }    private void PrevPage() {        Intent slideactivity = new Intent(this, WhiteBoardActivity.class);        Bundle bndlanimation =                ActivityOptions.makeCustomAnimation(getApplicationContext(), R.anim.slide_in_left, R.anim.slide_out_right).toBundle();        if(prevPagePresent) {            String iconsStoragePath = Environment.getExternalStorageDirectory() + "/Scribble/"+ getIntent().getExtras().getString(NOTEBOOK_NAME) + "/";            slideactivity.putExtra(MODE, MODE_EDIT);            slideactivity.putExtra(NOTEBOOK_NAME, getIntent().getExtras().getString(NOTEBOOK_NAME));            slideactivity.putExtra(PAGE_FILENAME, iconsStoragePath + Folderfiles[CurrentPageFileIndex-1]);            // SlideupPanel.hidePanel();            startActivity(slideactivity, bndlanimation);            this.finish();        }    }    private void ChooseTool(String Tool) {        int active_color = Color.parseColor("#dddddd");        ResetActiveTool();        if (Tool == PENCIL_TOOL) {            ACTIVE_TOOL = PENCIL_TOOL;            //PencilButton.setBackgroundColor(active_color);            drawview.setBrushSize(0);            drawview.setColor(Color.parseColor("#2e2e2e"));            //ActiveToolHolder.setVisibility(View.GONE);        } else if(Tool == BRUSH_TOOL) {            //BrushToolButton.setBackgroundColor(active_color);            drawview.setColor(CurrentColor);            ActiveToolHolder.setVisibility(View.VISIBLE);            PickColorButton.setVisibility(View.VISIBLE);            brushsizebar.setVisibility(View.VISIBLE);        } else if(Tool == ERASER_TOOL) {            drawview.setColor(Color.parseColor("#ffffff"));            // EraserToolButton.setBackgroundColor(active_color);            ActiveToolHolder.setVisibility(View.VISIBLE);            PickColorButton.setVisibility(View.GONE);            brushsizebar.setVisibility(View.VISIBLE);        }    }    private void ResetActiveTool() {        int unactive_color = Color.parseColor("#ffffff");        // PencilButton.setBackgroundColor(unactive_color);        BrushToolButton.setBackgroundColor(unactive_color);        EraserToolButton.setBackgroundColor(unactive_color);    }    private void ChooseBackground() {        /*BackgroundChooserDialog = new Dialog(this);        BackgroundChooserDialog.setContentView(R.layout.background_chooser_dialog);        BackgroundChooserDialog.setTitle("Choose A Option");        ImageView CameraButton = (ImageView) BackgroundChooserDialog.findViewById(R.id.pick_camera_button);        ImageView GalleryButton = (ImageView) BackgroundChooserDialog.findViewById(R.id.pick_gallery_button);        TextView ColorButton = (TextView) BackgroundChooserDialog.findViewById(R.id.pick_color_background_button);        View.OnClickListener listener = new View.OnClickListener() {            @Override            public void onClick(View view) {                switch (view.getId()) {                    case R.id.pick_camera_button:                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        File f = new File(android.os.Environment                                .getExternalStorageDirectory(), "temp.jpg");                        intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(f));                        startActivityForResult(intent, REQUEST_CAMERA);                        break;                    case R.id.pick_gallery_button:                        Intent i = new Intent(                                Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);                        startActivityForResult(i, GALLERY_LOAD_IMAGE);                        break;                }            }        };        CameraButton.setOnClickListener(listener);        GalleryButton.setOnClickListener(listener);        ColorButton.setOnClickListener(listener);        BackgroundChooserDialog.show();*/        PopupMenu popup = new PopupMenu(WhiteBoardActivity.this, BackgroundButton);        //Inflating the Popup using xml file        popup.getMenuInflater().inflate(R.menu.background_menu, popup.getMenu());        //registering popup with OnMenuItemClickListener        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {            public boolean onMenuItemClick(MenuItem item) {                switch(item.getItemId()) {                    case R.id.texture_background:                        //BackgroundImage.setImageResource(R.drawable.repeat_texture);                        drawview.setBackground(BitmapFactory.decodeResource(getResources(), R.drawable.repeat_texture));                        break;                    case R.id.check_background:                        BackgroundImage.setImageResource(R.drawable.lined_repeat);                        break;                    case R.id.paper_background:                        BackgroundImage.setImageResource(R.drawable.repeat_paper);                    case R.id.two_lines_background:                        if(getIntent().getExtras().getString(MODE).equals(MODE_EDIT)) {                            Toast.makeText(WhiteBoardActivity.this, "Sorry! Cannot Change Background Now", Toast.LENGTH_LONG).show();                        } else {                            // SetNumberOfLines(10);                            setAlert();                            alertDw.show();                        }                        break;                }                return true;            }        });        popup.show();//showing popup menu    }    private void SetNumberOfLines(int numLines) {        BackgroundImage.buildDrawingCache();        final Bitmap backImage = BackgroundImage.getDrawingCache();        Bitmap bmOverlay = Bitmap.createBitmap(backImage.getWidth(), backImage.getHeight(), backImage.getConfig());        Canvas BackgroundCanvas = new Canvas(bmOverlay);        Paint drawPaint = new Paint();        drawPaint.setColor(Color.parseColor("#95A5A6"));        drawPaint.setAntiAlias(true);        drawPaint.setStrokeWidth(1);        drawPaint.setStyle(Paint.Style.STROKE);        drawPaint.setStrokeJoin(Paint.Join.ROUND);        drawPaint.setStrokeCap(Paint.Cap.ROUND);        int lineSpacing = backImage.getHeight()/ numLines;        for(int i = 1; i <= numLines; i++) {            // startX startY stopX stopY paint            BackgroundCanvas.drawLine(10, lineSpacing*i, backImage.getWidth()-10, lineSpacing*i, drawPaint);        }        drawview.setBackground(bmOverlay);        // BackgroundImage.setImageBitmap(bmOverlay);    }    public void setAlert(){        RelativeLayout linearLayout=new RelativeLayout(context);        aNumberPicker = new NumberPicker(context);        aNumberPicker.setMaxValue(20);        aNumberPicker.setMinValue(2);        aNumberPicker.setWrapSelectorWheel(false);        aNumberPicker.setClickable(false);        aNumberPicker.setEnabled(true);        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(50,50);        RelativeLayout.LayoutParams numPicerParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);        numPicerParams.addRule(RelativeLayout.CENTER_HORIZONTAL);        linearLayout.setLayoutParams(params);        linearLayout.addView(aNumberPicker,numPicerParams);        linearLayout.isClickable();        aNumberPicker.setOnValueChangedListener(new NumberPicker.OnValueChangeListener() {            @Override            public void onValueChange(NumberPicker picker, int oldVal, int newVal){            }        });        alertBw = new AlertDialog.Builder(context);        alertBw.setTitle("Numebe of Lines");        alertBw.setView(linearLayout);        alertBw.setPositiveButton("DONE", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                // TODO Auto-generated method stub                dialog.dismiss();                SetNumberOfLines(aNumberPicker.getValue());            }        });        alertBw.setNeutralButton("Cancel", new DialogInterface.OnClickListener(){            @Override            public void onClick(DialogInterface dialog, int which){                dialog.dismiss();            }        });        alertDw = alertBw.create();    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == GALLERY_LOAD_IMAGE && resultCode == RESULT_OK && null != data) {            Uri selectedImage = data.getData();            String[] filePathColumn = { MediaStore.Images.Media.DATA };            Cursor cursor = getContentResolver().query(selectedImage,                    filePathColumn, null, null, null);            cursor.moveToFirst();            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);            String picturePath = cursor.getString(columnIndex);            cursor.close();            BackgroundChooserDialog.cancel();            // String picturePath contains the path of selected Image            BackgroundImage.setImageBitmap(BitmapFactory.decodeFile(picturePath));            ImageAsBackground = true;        } else if(requestCode == REQUEST_CAMERA) {            File f = new File(Environment.getExternalStorageDirectory()                    .toString());            for (File temp : f.listFiles()) {                if (temp.getName().equals("temp.jpg")) {                    f = temp;                    break;                }            }            try {                Bitmap bm;                BitmapFactory.Options btmapOptions = new BitmapFactory.Options();                bm = BitmapFactory.decodeFile(f.getAbsolutePath(),                        btmapOptions);                BackgroundImage.setImageBitmap(bm);                BackgroundChooserDialog.cancel();                String path = android.os.Environment                        .getExternalStorageDirectory()                        + File.separator                        + "Phoenix" + File.separator + "default";                f.delete();                OutputStream fOut = null;                File file = new File(path, String.valueOf(System                        .currentTimeMillis()) + ".jpg");                try {                    fOut = new FileOutputStream(file);                    bm.compress(Bitmap.CompressFormat.JPEG, 85, fOut);                    fOut.flush();                    fOut.close();                } catch (FileNotFoundException e) {                    e.printStackTrace();                } catch (IOException e) {                    e.printStackTrace();                } catch (Exception e) {                    e.printStackTrace();                }            } catch (Exception e) {                e.printStackTrace();            }            ImageAsBackground = true;        }    }    private void PickColor() {        final Dialog colorDialog = new Dialog(WhiteBoardActivity.this);        colorDialog.setTitle("Pick Brush Color");        colorDialog.setCancelable(true);        colorDialog.setContentView(R.layout.color_picker_dialog);        final ColorPicker picker = (ColorPicker) colorDialog.findViewById(R.id.color_picker);        picker.setShowOldCenterColor(true);        picker.setOldCenterColor(CurrentColor);        ColorIndicator.setBackgroundColor(picker.getColor());        SVBar svBar = (SVBar) colorDialog.findViewById(R.id.svbar);        OpacityBar opacityBar = (OpacityBar) colorDialog.findViewById(R.id.opacitybar);        SaturationBar saturationBar = (SaturationBar) colorDialog.findViewById(R.id.saturationbar);        picker.addSVBar(svBar);        picker.addOpacityBar(opacityBar);        picker.addSaturationBar(saturationBar);        picker.setOnColorChangedListener(new ColorPicker.OnColorChangedListener() {            @Override            public void onColorChanged(int i) {                drawview.setColor(i);            }        });        Button pickedButton = (Button) colorDialog.findViewById(R.id.color_picked_button);        pickedButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                colorDialog.dismiss();                CurrentColor = picker.getColor();                drawview.setColor(picker.getColor());                ColorIndicator.setBackgroundColor(picker.getColor());            }        });        colorDialog.show();    }    private void Save() {        //save drawing        drawview.setDrawingCacheEnabled(true);        Bitmap image = drawview.getDrawingCache();        BackgroundImage.buildDrawingCache();        Bitmap bitmap = BackgroundImage.getDrawingCache();        Bitmap MergedBitmap = MergeBitmaps(bitmap, image);        storeImage(MergedBitmap);        BackgroundImage.destroyDrawingCache();        drawview.destroyDrawingCache();    }    private Bitmap MergeBitmaps(Bitmap background,  Bitmap foreground) {        Bitmap bmOverlay = Bitmap.createBitmap(background.getWidth(), background.getHeight(), background.getConfig());        Canvas canvas = new Canvas(bmOverlay);        //Background Color        canvas.drawColor(Color.parseColor("#ffffff"));        //drawing bitmaps on canvas        canvas.drawBitmap(background, new Matrix(), null);        canvas.drawBitmap(foreground, 0, 0, null);        // + 10 for margin        int height = (canvas.getHeight() / 6) + 50;        int width = (canvas.getWidth() / 12) + 50;/*        BitmapFactory.Options options = new BitmapFactory.Options();        Bitmap resource = BitmapFactory.decodeResource(getResources(), R.drawable.watermark, options);        Bitmap watermark = Bitmap.createScaledBitmap(resource, height, width, true);        int x = canvas.getWidth() - watermark.getWidth();        int y = canvas.getHeight() - watermark.getHeight();        canvas.drawBitmap(watermark, x, y, null);*/        return bmOverlay;    }    private String storeImage(Bitmap imageData) {        //get path to external storage (SD card)        String iconsStoragePath = Environment.getExternalStorageDirectory() + "/Scribble/"+ getIntent().getExtras().getString(NOTEBOOK_NAME) + "/";        File sdIconStorageDir = new File(iconsStoragePath);        if(!sdIconStorageDir.exists()) {            sdIconStorageDir.mkdir();        }        String filePath = "";        try {            int TotalPages = sdIconStorageDir.list().length;            if(!alreadySaved) {                if(getIntent().getExtras().getString(MODE).equals(this.MODE_EDIT)) {                    filePath = getIntent().getExtras().getString(PAGE_FILENAME);                    File oldFile = new File(filePath);                    oldFile.delete();                } else if(getIntent().getExtras().getString(MODE).equals(this.MODE_NEW)){                    filePath = sdIconStorageDir.toString() + "/page" + (TotalPages+1) + ".png";                }            } else {                filePath = savedFilePath;            }            alreadySaved = true;            savedFilePath = filePath;            FileOutputStream fileOutputStream = new FileOutputStream(filePath);            BufferedOutputStream bos = new BufferedOutputStream(fileOutputStream);            //choose another format if PNG doesn't suit you            imageData.compress(Bitmap.CompressFormat.PNG, 100, bos);            bos.flush();            bos.close();            fileOutputStream.flush();            fileOutputStream.close();            return filePath;        } catch (FileNotFoundException e) {        } catch (IOException e) {        }        return filePath;    }    private void ShareImage(File file){        Intent share = new Intent(Intent.ACTION_SEND);        share.setType("image/*");        Uri url = Uri.fromFile(file);        share.putExtra(Intent.EXTRA_STREAM, url);        startActivity(Intent.createChooser(share, "Share Image"));    }    private class OnPinchListener extends ScaleGestureDetector.SimpleOnScaleGestureListener {        private float scaleFactor = 1.f;        private float MIN_ZOOM = 1f;        private float MAX_ZOOM = 5f;        float startingSpan;        float endSpan;        float startFocusX;        float startFocusY;        public boolean onScaleBegin(ScaleGestureDetector detector) {            startingSpan = detector.getCurrentSpan();            startFocusX = detector.getFocusX();            startFocusY = detector.getFocusY();            return true;        }        public boolean onScale(ScaleGestureDetector detector) {            scaleFactor *= detector.getScaleFactor();            scaleFactor = Math.max(MIN_ZOOM, Math.min(scaleFactor, MAX_ZOOM));            Log.d("FOCUSING-start-X",Float.toString(startFocusX));            Log.d("FOCUSING-starty-Y",Float.toString(startFocusY));            MainLayout.scale(detector.getCurrentSpan() / startingSpan, startFocusX, startFocusY);            return true;        }        public void onScaleEnd(ScaleGestureDetector detector) {            // MainLayout.restore();            Log.d("LEAG", "SCALE END");        }    }}